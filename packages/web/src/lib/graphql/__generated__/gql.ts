/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n  mutation ContactHost($input: ContactHostInput!) {\n    contactHost(input: $input) {\n      success\n      message\n    }\n  }\n": types.ContactHostDocument,
    "\n  mutation AddPropertyReview($listingId: ID!, $input: ReviewInput!) {\n    addPropertyReview(listingId: $listingId, input: $input) {\n      id\n      listing {\n        id\n        title\n      }\n      author {\n        id\n        name\n        avatar\n      }\n      content\n      rating\n      createdAt\n    }\n  }\n": types.AddPropertyReviewDocument,
    "\n  mutation AddHostReview($hostId: ID!, $input: ReviewInput!) {\n    addHostReview(hostId: $hostId, input: $input) {\n      id\n      host {\n        id\n        user {\n          name\n        }\n      }\n      author {\n        id\n        name\n        avatar\n      }\n      content\n      rating\n      createdAt\n    }\n  }\n": types.AddHostReviewDocument,
    "\n  query Listings(\n    $location: String\n    $filter: ListingsFilter!\n    $propertyType: String\n    $minPrice: Int\n    $maxPrice: Int\n    $limit: Int!\n    $page: Int!\n  ) {\n    listings(\n      location: $location\n      filter: $filter\n      propertyType: $propertyType\n      minPrice: $minPrice\n      maxPrice: $maxPrice\n      limit: $limit\n      page: $page\n    ) {\n      total\n      result {\n        id\n        title\n        description\n        images\n        host {\n          id\n          name\n          avatar\n          hasWallet\n        }\n        country\n        admin\n        city\n        type\n        address\n        price\n        numOfGuests\n        bedrooms\n        bathrooms\n        swimmingPools\n        pantries\n        features {\n          name\n          icon\n          description\n        }\n        averageRating\n        reviewCount\n      }\n    }\n  }\n": types.ListingsDocument,
    "\n  query Listing($id: ID!) {\n    listing(id: $id) {\n      id\n      title\n      description\n      images\n      host {\n        id\n        name\n        avatar\n        hasWallet\n      }\n      country\n      admin\n      city\n      type\n      address\n      price\n      numOfGuests\n      bedrooms\n      bathrooms\n      swimmingPools\n      pantries\n      features {\n        name\n        icon\n        description\n      }\n      bookings(limit: 10, page: 1) {\n        total\n        result {\n          id\n          checkIn\n          checkOut\n          tenant {\n            id\n            name\n            avatar\n          }\n        }\n      }\n      reviews(limit: 5, page: 1) {\n        total\n        result {\n          id\n          author {\n            id\n            name\n            avatar\n          }\n          content\n          rating\n          createdAt\n        }\n      }\n      averageRating\n      reviewCount\n    }\n  }\n": types.ListingDocument,
    "\n  query User($id: ID!) {\n    user(id: $id) {\n      id\n      name\n      avatar\n      email\n      hasWallet\n      income\n      bookings(limit: 10, page: 1) {\n        total\n        result {\n          id\n          listing {\n            id\n            title\n            images\n            address\n            price\n          }\n          checkIn\n          checkOut\n        }\n      }\n      listings(limit: 10, page: 1) {\n        total\n        result {\n          id\n          title\n          images\n          address\n          price\n        }\n      }\n      isHost\n      hostProfile {\n        id\n        license\n        agency\n        experience\n        specializations\n        ratings\n        reviewCount\n      }\n    }\n  }\n": types.UserDocument,
    "\n  query Hosts($limit: Int!, $page: Int!) {\n    hosts(limit: $limit, page: $page) {\n      total\n      result {\n        id\n        user {\n          id\n          name\n          avatar\n        }\n        license\n        agency\n        experience\n        specializations\n        ratings\n        reviewCount\n      }\n    }\n  }\n": types.HostsDocument,
    "\n  query Host($id: ID!) {\n    host(id: $id) {\n      id\n      user {\n        id\n        name\n        avatar\n        email\n      }\n      license\n      agency\n      experience\n      specializations\n      ratings\n      reviewCount\n      reviews(limit: 5, page: 1) {\n        total\n        result {\n          id\n          author {\n            id\n            name\n            avatar\n          }\n          content\n          rating\n          createdAt\n        }\n      }\n    }\n  }\n": types.HostDocument,
    "\n  query PropertyReviews($listingId: ID!, $limit: Int!, $page: Int!) {\n    propertyReviews(listingId: $listingId, limit: $limit, page: $page) {\n      total\n      result {\n        id\n        author {\n          id\n          name\n          avatar\n        }\n        content\n        rating\n        createdAt\n      }\n    }\n  }\n": types.PropertyReviewsDocument,
    "\n  query HostReviews($hostId: ID!, $limit: Int!, $page: Int!) {\n    hostReviews(hostId: $hostId, limit: $limit, page: $page) {\n      total\n      result {\n        id\n        author {\n          id\n          name\n          avatar\n        }\n        content\n        rating\n        createdAt\n      }\n    }\n  }\n": types.HostReviewsDocument,
    "\n  query FeaturedListings($limit: Int!) {\n    listings(\n      filter: PRICE_HIGH_TO_LOW\n      limit: $limit\n      page: 1\n    ) {\n      total\n      result {\n        id\n        title\n        description\n        images\n        host {\n          id\n          name\n          avatar\n          hasWallet\n        }\n        country\n        admin\n        city\n        type\n        address\n        price\n        numOfGuests\n        bedrooms\n        bathrooms\n        features {\n          name\n          icon\n          description\n        }\n        averageRating\n        reviewCount\n      }\n    }\n  }\n": types.FeaturedListingsDocument,
    "\n  query NearbyLocations($listingId: ID!, $radius: Float!) {\n    nearbyLocations(listingId: $listingId, radius: $radius) {\n      categories {\n        name\n        icon\n        places {\n          name\n          distance\n          type\n        }\n      }\n    }\n  }\n": types.NearbyLocationsDocument,
    "\n  query IsLoggedIn {\n    isLoggedIn {\n      id\n      token\n      avatar\n      name\n      email\n      didRequest\n    }\n  }\n": types.IsLoggedInDocument,
    "\n  mutation LogOut {\n    logOut {\n      didRequest\n    }\n  }\n": types.LogOutDocument,
    "\n  mutation LogIn($input: LoginInput!) {\n    logIn(input: $input) {\n      id\n      token\n      avatar\n      hasWallet\n      didRequest\n    }\n  }\n": types.LogInDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ContactHost($input: ContactHostInput!) {\n    contactHost(input: $input) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation ContactHost($input: ContactHostInput!) {\n    contactHost(input: $input) {\n      success\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddPropertyReview($listingId: ID!, $input: ReviewInput!) {\n    addPropertyReview(listingId: $listingId, input: $input) {\n      id\n      listing {\n        id\n        title\n      }\n      author {\n        id\n        name\n        avatar\n      }\n      content\n      rating\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation AddPropertyReview($listingId: ID!, $input: ReviewInput!) {\n    addPropertyReview(listingId: $listingId, input: $input) {\n      id\n      listing {\n        id\n        title\n      }\n      author {\n        id\n        name\n        avatar\n      }\n      content\n      rating\n      createdAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddHostReview($hostId: ID!, $input: ReviewInput!) {\n    addHostReview(hostId: $hostId, input: $input) {\n      id\n      host {\n        id\n        user {\n          name\n        }\n      }\n      author {\n        id\n        name\n        avatar\n      }\n      content\n      rating\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation AddHostReview($hostId: ID!, $input: ReviewInput!) {\n    addHostReview(hostId: $hostId, input: $input) {\n      id\n      host {\n        id\n        user {\n          name\n        }\n      }\n      author {\n        id\n        name\n        avatar\n      }\n      content\n      rating\n      createdAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Listings(\n    $location: String\n    $filter: ListingsFilter!\n    $propertyType: String\n    $minPrice: Int\n    $maxPrice: Int\n    $limit: Int!\n    $page: Int!\n  ) {\n    listings(\n      location: $location\n      filter: $filter\n      propertyType: $propertyType\n      minPrice: $minPrice\n      maxPrice: $maxPrice\n      limit: $limit\n      page: $page\n    ) {\n      total\n      result {\n        id\n        title\n        description\n        images\n        host {\n          id\n          name\n          avatar\n          hasWallet\n        }\n        country\n        admin\n        city\n        type\n        address\n        price\n        numOfGuests\n        bedrooms\n        bathrooms\n        swimmingPools\n        pantries\n        features {\n          name\n          icon\n          description\n        }\n        averageRating\n        reviewCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query Listings(\n    $location: String\n    $filter: ListingsFilter!\n    $propertyType: String\n    $minPrice: Int\n    $maxPrice: Int\n    $limit: Int!\n    $page: Int!\n  ) {\n    listings(\n      location: $location\n      filter: $filter\n      propertyType: $propertyType\n      minPrice: $minPrice\n      maxPrice: $maxPrice\n      limit: $limit\n      page: $page\n    ) {\n      total\n      result {\n        id\n        title\n        description\n        images\n        host {\n          id\n          name\n          avatar\n          hasWallet\n        }\n        country\n        admin\n        city\n        type\n        address\n        price\n        numOfGuests\n        bedrooms\n        bathrooms\n        swimmingPools\n        pantries\n        features {\n          name\n          icon\n          description\n        }\n        averageRating\n        reviewCount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Listing($id: ID!) {\n    listing(id: $id) {\n      id\n      title\n      description\n      images\n      host {\n        id\n        name\n        avatar\n        hasWallet\n      }\n      country\n      admin\n      city\n      type\n      address\n      price\n      numOfGuests\n      bedrooms\n      bathrooms\n      swimmingPools\n      pantries\n      features {\n        name\n        icon\n        description\n      }\n      bookings(limit: 10, page: 1) {\n        total\n        result {\n          id\n          checkIn\n          checkOut\n          tenant {\n            id\n            name\n            avatar\n          }\n        }\n      }\n      reviews(limit: 5, page: 1) {\n        total\n        result {\n          id\n          author {\n            id\n            name\n            avatar\n          }\n          content\n          rating\n          createdAt\n        }\n      }\n      averageRating\n      reviewCount\n    }\n  }\n"): (typeof documents)["\n  query Listing($id: ID!) {\n    listing(id: $id) {\n      id\n      title\n      description\n      images\n      host {\n        id\n        name\n        avatar\n        hasWallet\n      }\n      country\n      admin\n      city\n      type\n      address\n      price\n      numOfGuests\n      bedrooms\n      bathrooms\n      swimmingPools\n      pantries\n      features {\n        name\n        icon\n        description\n      }\n      bookings(limit: 10, page: 1) {\n        total\n        result {\n          id\n          checkIn\n          checkOut\n          tenant {\n            id\n            name\n            avatar\n          }\n        }\n      }\n      reviews(limit: 5, page: 1) {\n        total\n        result {\n          id\n          author {\n            id\n            name\n            avatar\n          }\n          content\n          rating\n          createdAt\n        }\n      }\n      averageRating\n      reviewCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query User($id: ID!) {\n    user(id: $id) {\n      id\n      name\n      avatar\n      email\n      hasWallet\n      income\n      bookings(limit: 10, page: 1) {\n        total\n        result {\n          id\n          listing {\n            id\n            title\n            images\n            address\n            price\n          }\n          checkIn\n          checkOut\n        }\n      }\n      listings(limit: 10, page: 1) {\n        total\n        result {\n          id\n          title\n          images\n          address\n          price\n        }\n      }\n      isHost\n      hostProfile {\n        id\n        license\n        agency\n        experience\n        specializations\n        ratings\n        reviewCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query User($id: ID!) {\n    user(id: $id) {\n      id\n      name\n      avatar\n      email\n      hasWallet\n      income\n      bookings(limit: 10, page: 1) {\n        total\n        result {\n          id\n          listing {\n            id\n            title\n            images\n            address\n            price\n          }\n          checkIn\n          checkOut\n        }\n      }\n      listings(limit: 10, page: 1) {\n        total\n        result {\n          id\n          title\n          images\n          address\n          price\n        }\n      }\n      isHost\n      hostProfile {\n        id\n        license\n        agency\n        experience\n        specializations\n        ratings\n        reviewCount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Hosts($limit: Int!, $page: Int!) {\n    hosts(limit: $limit, page: $page) {\n      total\n      result {\n        id\n        user {\n          id\n          name\n          avatar\n        }\n        license\n        agency\n        experience\n        specializations\n        ratings\n        reviewCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query Hosts($limit: Int!, $page: Int!) {\n    hosts(limit: $limit, page: $page) {\n      total\n      result {\n        id\n        user {\n          id\n          name\n          avatar\n        }\n        license\n        agency\n        experience\n        specializations\n        ratings\n        reviewCount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Host($id: ID!) {\n    host(id: $id) {\n      id\n      user {\n        id\n        name\n        avatar\n        email\n      }\n      license\n      agency\n      experience\n      specializations\n      ratings\n      reviewCount\n      reviews(limit: 5, page: 1) {\n        total\n        result {\n          id\n          author {\n            id\n            name\n            avatar\n          }\n          content\n          rating\n          createdAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Host($id: ID!) {\n    host(id: $id) {\n      id\n      user {\n        id\n        name\n        avatar\n        email\n      }\n      license\n      agency\n      experience\n      specializations\n      ratings\n      reviewCount\n      reviews(limit: 5, page: 1) {\n        total\n        result {\n          id\n          author {\n            id\n            name\n            avatar\n          }\n          content\n          rating\n          createdAt\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PropertyReviews($listingId: ID!, $limit: Int!, $page: Int!) {\n    propertyReviews(listingId: $listingId, limit: $limit, page: $page) {\n      total\n      result {\n        id\n        author {\n          id\n          name\n          avatar\n        }\n        content\n        rating\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query PropertyReviews($listingId: ID!, $limit: Int!, $page: Int!) {\n    propertyReviews(listingId: $listingId, limit: $limit, page: $page) {\n      total\n      result {\n        id\n        author {\n          id\n          name\n          avatar\n        }\n        content\n        rating\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostReviews($hostId: ID!, $limit: Int!, $page: Int!) {\n    hostReviews(hostId: $hostId, limit: $limit, page: $page) {\n      total\n      result {\n        id\n        author {\n          id\n          name\n          avatar\n        }\n        content\n        rating\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query HostReviews($hostId: ID!, $limit: Int!, $page: Int!) {\n    hostReviews(hostId: $hostId, limit: $limit, page: $page) {\n      total\n      result {\n        id\n        author {\n          id\n          name\n          avatar\n        }\n        content\n        rating\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FeaturedListings($limit: Int!) {\n    listings(\n      filter: PRICE_HIGH_TO_LOW\n      limit: $limit\n      page: 1\n    ) {\n      total\n      result {\n        id\n        title\n        description\n        images\n        host {\n          id\n          name\n          avatar\n          hasWallet\n        }\n        country\n        admin\n        city\n        type\n        address\n        price\n        numOfGuests\n        bedrooms\n        bathrooms\n        features {\n          name\n          icon\n          description\n        }\n        averageRating\n        reviewCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query FeaturedListings($limit: Int!) {\n    listings(\n      filter: PRICE_HIGH_TO_LOW\n      limit: $limit\n      page: 1\n    ) {\n      total\n      result {\n        id\n        title\n        description\n        images\n        host {\n          id\n          name\n          avatar\n          hasWallet\n        }\n        country\n        admin\n        city\n        type\n        address\n        price\n        numOfGuests\n        bedrooms\n        bathrooms\n        features {\n          name\n          icon\n          description\n        }\n        averageRating\n        reviewCount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query NearbyLocations($listingId: ID!, $radius: Float!) {\n    nearbyLocations(listingId: $listingId, radius: $radius) {\n      categories {\n        name\n        icon\n        places {\n          name\n          distance\n          type\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query NearbyLocations($listingId: ID!, $radius: Float!) {\n    nearbyLocations(listingId: $listingId, radius: $radius) {\n      categories {\n        name\n        icon\n        places {\n          name\n          distance\n          type\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query IsLoggedIn {\n    isLoggedIn {\n      id\n      token\n      avatar\n      name\n      email\n      didRequest\n    }\n  }\n"): (typeof documents)["\n  query IsLoggedIn {\n    isLoggedIn {\n      id\n      token\n      avatar\n      name\n      email\n      didRequest\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation LogOut {\n    logOut {\n      didRequest\n    }\n  }\n"): (typeof documents)["\n  mutation LogOut {\n    logOut {\n      didRequest\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation LogIn($input: LoginInput!) {\n    logIn(input: $input) {\n      id\n      token\n      avatar\n      hasWallet\n      didRequest\n    }\n  }\n"): (typeof documents)["\n  mutation LogIn($input: LoginInput!) {\n    logIn(input: $input) {\n      id\n      token\n      avatar\n      hasWallet\n      didRequest\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;